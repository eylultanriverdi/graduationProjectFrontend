{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\lenovo\\\\Desktop\\\\proje\\\\graduationProjectFrontend\\\\src\\\\components\\\\ProductListing.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { connect } from 'react-redux';\nimport { createCalorieInfo, setCalorieInfoList, setProducts } from '../redux/actions/productActions';\nimport axios from 'axios';\nimport { CircularProgress, Grid, Paper, Typography, Button, TextField } from '@mui/material';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst CalorieInfoPage = props => {\n  _s();\n  const {\n    allProducts,\n    calorieInfoList,\n    createCalorieInfo,\n    setCalorieInfoList\n  } = props;\n  const [currentPage, setCurrentPage] = useState(1);\n  const [productsPerPage] = useState(10); // Her sayfada kaç ürün gösterileceği\n  const [totalCalories, setTotalCalories] = useState(0); // Toplam kalori değeri\n\n  const fetchProducts = async () => {\n    try {\n      const resp = await axios.get(`http://localhost:3001/products?page=${currentPage}&limit=${productsPerPage}`);\n      if (resp && resp.status === 200) {\n        const {\n          pagination,\n          products\n        } = resp.data;\n        const {\n          totalPages\n        } = pagination;\n        const decodedProducts = products.map(product => {\n          const base64Image = `data:image/jpeg;base64,${product.productImage}`;\n          return {\n            ...product,\n            productImage: base64Image\n          };\n        });\n        props.setProducts(decodedProducts);\n      }\n    } catch (error) {\n      console.log('Error:', error);\n    }\n  };\n  const calculateTotalCalories = () => {\n    let totalCalories = 0;\n    if (calorieInfoList && calorieInfoList.length > 0) {\n      const currentDate = new Date().toISOString().split('T')[0]; // Bugünün tarihini al\n\n      // İlgili tarih bilgisine sahip ürünleri bul\n      const productsWithSameDate = calorieInfoList.filter(calorieInfo => calorieInfo.createDate === currentDate);\n\n      // Toplam kalori değerini hesapla\n      if (productsWithSameDate.length > 0) {\n        totalCalories = productsWithSameDate.reduce((total, calorieInfo) => total + parseInt(calorieInfo.totalCalorie), 0);\n      }\n    }\n    return totalCalories.toString();\n  };\n  const fetchCalorieInfoList = async () => {\n    try {\n      const resp = await axios.get(`http://localhost:3001/calorieInfo`);\n      if (resp && resp.status === 200) {\n        props.setCalorieInfoList(resp.data);\n      }\n    } catch (error) {\n      console.log('Error:', error);\n    }\n  };\n  useEffect(() => {\n    fetchProducts();\n    fetchCalorieInfoList();\n    setTotalCalories(calculateTotalCalories()); // İlk açılışta toplam kalori değerini güncelle\n  }, [currentPage]);\n  const handleAddToList = async productId => {\n    const currentDate = new Date().toISOString().slice(0, 10);\n    try {\n      const selectedProduct = allProducts.find(product => product.productId === productId);\n      console.log(selectedProduct, 'selectedProduct');\n      if (selectedProduct) {\n        const {\n          productId,\n          productName,\n          description,\n          productImage,\n          proteinValue,\n          carbohydrateValue,\n          oilValue,\n          glutenValue,\n          ketogenicDiet,\n          glutenFree,\n          saltFree,\n          calorieValue\n        } = selectedProduct;\n        const newCalorieInfo = {\n          productId,\n          productName,\n          description,\n          productImage,\n          proteinValue,\n          carbohydrateValue,\n          oilValue,\n          glutenValue,\n          ketogenicDiet,\n          glutenFree,\n          saltFree,\n          calorieValue,\n          createDate: currentDate\n        };\n        await axios.post('http://localhost:3001/calorieInfo', newCalorieInfo);\n        createCalorieInfo(newCalorieInfo);\n        setTotalCalories(calculateTotalCalories()); // Toplam kalori değerini güncelle\n      }\n    } catch (error) {\n      console.log('Error:', error);\n    }\n  };\n\n  // Diğer sayfalara geçiş yapma işlevi\n  const handlePageChange = (event, value) => {\n    setCurrentPage(value);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(Typography, {\n      variant: \"h4\",\n      gutterBottom: true,\n      children: [\"Bug\\xFCn\\xFCn Toplam Kalori De\\u011Feri: \", totalCalories]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 128,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Grid, {\n      container: true,\n      spacing: 2,\n      mt: 3,\n      children: allProducts.map(product => /*#__PURE__*/_jsxDEV(Grid, {\n        item: true,\n        xs: 6,\n        sm: 4,\n        md: 3,\n        children: /*#__PURE__*/_jsxDEV(Paper, {\n          elevation: 3,\n          p: 2,\n          children: [/*#__PURE__*/_jsxDEV(Typography, {\n            variant: \"h6\",\n            children: product.productName\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 136,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(Typography, {\n            variant: \"body2\",\n            color: \"textSecondary\",\n            mt: 1,\n            children: product.description\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 137,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(Typography, {\n            variant: \"body2\",\n            color: \"textSecondary\",\n            mt: 1,\n            children: [\"Kalori De\\u011Feri: \", product.calorieValue]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 140,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(Button, {\n            variant: \"contained\",\n            color: \"primary\",\n            size: \"small\",\n            onClick: () => handleAddToList(product.productId),\n            mt: 2,\n            children: \"Bug\\xFCn\\xFCn Listesine Ekle\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 143,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 135,\n          columnNumber: 13\n        }, this)\n      }, product.productId, false, {\n        fileName: _jsxFileName,\n        lineNumber: 134,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 132,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 127,\n    columnNumber: 5\n  }, this);\n};\n_s(CalorieInfoPage, \"gsoobZ4mJNp6nVT/Uylys6oUibk=\");\n_c = CalorieInfoPage;\nconst mapStateToProps = state => {\n  return {\n    allProducts: state.products.allProducts,\n    calorieInfoList: state.products.calorieInfoList\n  };\n};\nconst mapDispatchToProps = dispatch => {\n  return {\n    createCalorieInfo: calorieInfo => dispatch(createCalorieInfo(calorieInfo)),\n    setCalorieInfoList: calorieInfoList => dispatch(setCalorieInfoList(calorieInfoList)),\n    setProducts: products => dispatch(setProducts(products))\n  };\n};\nexport default connect(mapStateToProps, mapDispatchToProps)(CalorieInfoPage);\nvar _c;\n$RefreshReg$(_c, \"CalorieInfoPage\");","map":{"version":3,"names":["React","useState","useEffect","connect","createCalorieInfo","setCalorieInfoList","setProducts","axios","CircularProgress","Grid","Paper","Typography","Button","TextField","jsxDEV","_jsxDEV","CalorieInfoPage","props","_s","allProducts","calorieInfoList","currentPage","setCurrentPage","productsPerPage","totalCalories","setTotalCalories","fetchProducts","resp","get","status","pagination","products","data","totalPages","decodedProducts","map","product","base64Image","productImage","error","console","log","calculateTotalCalories","length","currentDate","Date","toISOString","split","productsWithSameDate","filter","calorieInfo","createDate","reduce","total","parseInt","totalCalorie","toString","fetchCalorieInfoList","handleAddToList","productId","slice","selectedProduct","find","productName","description","proteinValue","carbohydrateValue","oilValue","glutenValue","ketogenicDiet","glutenFree","saltFree","calorieValue","newCalorieInfo","post","handlePageChange","event","value","children","variant","gutterBottom","fileName","_jsxFileName","lineNumber","columnNumber","container","spacing","mt","item","xs","sm","md","elevation","p","color","size","onClick","_c","mapStateToProps","state","mapDispatchToProps","dispatch","$RefreshReg$"],"sources":["C:/Users/lenovo/Desktop/proje/graduationProjectFrontend/src/components/ProductListing.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { createCalorieInfo, setCalorieInfoList, setProducts } from '../redux/actions/productActions';\r\nimport axios from 'axios';\r\nimport { CircularProgress, Grid, Paper, Typography, Button, TextField } from '@mui/material';\r\n\r\nconst CalorieInfoPage = (props) => {\r\n  const { allProducts, calorieInfoList, createCalorieInfo, setCalorieInfoList } = props;\r\n  const [currentPage, setCurrentPage] = useState(1);\r\n  const [productsPerPage] = useState(10); // Her sayfada kaç ürün gösterileceği\r\n  const [totalCalories, setTotalCalories] = useState(0); // Toplam kalori değeri\r\n\r\n  const fetchProducts = async () => {\r\n    try {\r\n      const resp = await axios.get(`http://localhost:3001/products?page=${currentPage}&limit=${productsPerPage}`);\r\n      if (resp && resp.status === 200) {\r\n        const { pagination, products } = resp.data;\r\n        const { totalPages } = pagination;\r\n\r\n        const decodedProducts = products.map((product) => {\r\n          const base64Image = `data:image/jpeg;base64,${product.productImage}`;\r\n          return {\r\n            ...product,\r\n            productImage: base64Image\r\n          };\r\n        });\r\n\r\n        props.setProducts(decodedProducts);\r\n      }\r\n    } catch (error) {\r\n      console.log('Error:', error);\r\n    }\r\n  };\r\n\r\n  const calculateTotalCalories = () => {\r\n    let totalCalories = 0;\r\n\r\n    if (calorieInfoList && calorieInfoList.length > 0) {\r\n      const currentDate = new Date().toISOString().split('T')[0]; // Bugünün tarihini al\r\n\r\n      // İlgili tarih bilgisine sahip ürünleri bul\r\n      const productsWithSameDate = calorieInfoList.filter((calorieInfo) => calorieInfo.createDate === currentDate);\r\n\r\n      // Toplam kalori değerini hesapla\r\n      if (productsWithSameDate.length > 0) {\r\n        totalCalories = productsWithSameDate.reduce(\r\n          (total, calorieInfo) => total + parseInt(calorieInfo.totalCalorie),\r\n          0\r\n        );\r\n      }\r\n    }\r\n\r\n    return totalCalories.toString();\r\n  };\r\n\r\n  const fetchCalorieInfoList = async () => {\r\n    try {\r\n      const resp = await axios.get(`http://localhost:3001/calorieInfo`);\r\n      if (resp && resp.status === 200) {\r\n        props.setCalorieInfoList(resp.data);\r\n      }\r\n    } catch (error) {\r\n      console.log('Error:', error);\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    fetchProducts();\r\n    fetchCalorieInfoList();\r\n    setTotalCalories(calculateTotalCalories()); // İlk açılışta toplam kalori değerini güncelle\r\n  }, [currentPage]);\r\n\r\n  const handleAddToList = async (productId) => {\r\n    const currentDate = new Date().toISOString().slice(0, 10);\r\n\r\n    try {\r\n      const selectedProduct = allProducts.find((product) => product.productId === productId);\r\n      console.log(selectedProduct, 'selectedProduct');\r\n      if (selectedProduct) {\r\n        const {\r\n          productId,\r\n          productName,\r\n          description,\r\n          productImage,\r\n          proteinValue,\r\n          carbohydrateValue,\r\n          oilValue,\r\n          glutenValue,\r\n          ketogenicDiet,\r\n          glutenFree,\r\n          saltFree,\r\n          calorieValue\r\n        } = selectedProduct;\r\n\r\n        const newCalorieInfo = {\r\n          productId,\r\n          productName,\r\n          description,\r\n          productImage,\r\n          proteinValue,\r\n          carbohydrateValue,\r\n          oilValue,\r\n          glutenValue,\r\n          ketogenicDiet,\r\n          glutenFree,\r\n          saltFree,\r\n          calorieValue,\r\n          createDate: currentDate\r\n        };\r\n\r\n        await axios.post('http://localhost:3001/calorieInfo', newCalorieInfo);\r\n        createCalorieInfo(newCalorieInfo);\r\n\r\n        setTotalCalories(calculateTotalCalories()); // Toplam kalori değerini güncelle\r\n      }\r\n    } catch (error) {\r\n      console.log('Error:', error);\r\n    }\r\n  };\r\n\r\n  // Diğer sayfalara geçiş yapma işlevi\r\n  const handlePageChange = (event, value) => {\r\n    setCurrentPage(value);\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <Typography variant=\"h4\" gutterBottom>\r\n        Bugünün Toplam Kalori Değeri: {totalCalories}\r\n      </Typography>\r\n\r\n      <Grid container spacing={2} mt={3}>\r\n        {allProducts.map((product) => (\r\n          <Grid item xs={6} sm={4} md={3} key={product.productId}>\r\n            <Paper elevation={3} p={2}>\r\n              <Typography variant=\"h6\">{product.productName}</Typography>\r\n              <Typography variant=\"body2\" color=\"textSecondary\" mt={1}>\r\n                {product.description}\r\n              </Typography>\r\n              <Typography variant=\"body2\" color=\"textSecondary\" mt={1}>\r\n                Kalori Değeri: {product.calorieValue}\r\n              </Typography>\r\n              <Button\r\n                variant=\"contained\"\r\n                color=\"primary\"\r\n                size=\"small\"\r\n                onClick={() => handleAddToList(product.productId)}\r\n                mt={2}\r\n              >\r\n                Bugünün Listesine Ekle\r\n              </Button>\r\n            </Paper>\r\n          </Grid>\r\n        ))}\r\n      </Grid>\r\n    </div>\r\n  );\r\n};\r\n\r\nconst mapStateToProps = (state) => {\r\n  return {\r\n    allProducts: state.products.allProducts,\r\n    calorieInfoList: state.products.calorieInfoList\r\n  };\r\n};\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n  return {\r\n    createCalorieInfo: (calorieInfo) => dispatch(createCalorieInfo(calorieInfo)),\r\n    setCalorieInfoList: (calorieInfoList) => dispatch(setCalorieInfoList(calorieInfoList)),\r\n    setProducts: (products) => dispatch(setProducts(products))\r\n  };\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(CalorieInfoPage);\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}